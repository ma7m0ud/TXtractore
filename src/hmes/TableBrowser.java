/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package hmes;


import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author jhon
 */
public class TableBrowser extends javax.swing.JPanel implements ActionListener{
    String selected="";
    ArrayList<Path> pathlist=new ArrayList<>();
    ArrayList<String> sizelist=new ArrayList<>();
    /**
     * Creates new form k
     */
    
    public TableBrowser(String file) {
        initComponents();
        op.addActionListener(this);
        ext.addActionListener(this);
findData(file);
    }
public void findData(String file){
    ArrayList<String> list=new ArrayList<>();
    
    ArrayList<String> listdate=new ArrayList<>();
                
    try { 
      //  System.out.println(System.getProperty("user.home")+file);
            Files.walk(Paths.get(System.getProperty("user.home")+file)).forEach(new Consumer<Path>() {
                
                public void accept(Path filePath) {
                   if (Files.isExecutable(filePath)&&Files.isRegularFile(filePath)&&(filePath.toString().contains("pst")||filePath.toString().contains("main.db"))) {
                        pathlist.add(filePath);
                        if(filePath.toString().contains("\\AppData\\Roaming\\Skype")){
                        list.add(filePath.toString().replace(System.getProperty("user.home")+"\\AppData\\Roaming\\Skype", ""));}else{
                        list.add(filePath.getFileName().toString());
                        }
                        try {
                            //System.out.println(Files.getLastModifiedTime(filePath,LinkOption.values()));
                        listdate.add(Files.getLastModifiedTime(filePath,LinkOption.values()).toString());
                     sizelist.add(Files.size(filePath)+"b");
                        } catch (IOException ex) {
                            Logger.getLogger(TableBrowser.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
                }
            });     } catch (IOException ex) {
            Logger.getLogger(TableBrowser.class.getName()).log(Level.SEVERE, null, ex);
        }
Object [][]v= new Object [list.size()][3] ;
for(int i=0;i<listdate.size();i++){
v[i][0]=list.get(i);
v[i][1]=listdate.get(i);
v[i][2]=sizelist.get(i);
}
jTable1.setModel(new javax.swing.table.DefaultTableModel(
            v,
            new String [] {
                "File Name", "Modified Time","Size"
            }
        ));

jTable1.enableInputMethods(false);
jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jTable1.setFillsViewportHeight(true);
ListSelectionModel selectionModel = jTable1.getSelectionModel();

selectionModel.addListSelectionListener(new ListSelectionListener() {
    public void valueChanged(ListSelectionEvent e) {
        handleSelectionEvent(e);
    }
});

}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        op = new javax.swing.JButton();
        ext = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setGridColor(new java.awt.Color(61, 90, 254));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addContainerGap())
        );

        op.setBackground(new java.awt.Color(61, 90, 254));
        op.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        op.setForeground(new java.awt.Color(255, 255, 255));
        op.setText("open");

        ext.setBackground(new java.awt.Color(61, 90, 254));
        ext.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ext.setForeground(new java.awt.Color(255, 255, 255));
        ext.setText("Extract");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(op, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(ext, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(op, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ext, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
protected void handleSelectionEvent(ListSelectionEvent e) {
    if (e.getValueIsAdjusting())
        return;

    // e.getSource() returns an object like this
    // javax.swing.DefaultListSelectionModel 1052752867 ={11}
    // where 11 is the index of selected element when mouse button is released

    String strSource= e.getSource().toString();
    int start = strSource.indexOf("{")+1,
        stop  = strSource.length()-1;
    //System.out.println(strSource);
  int  iSelectedIndex = Integer.parseInt(strSource.substring(start, stop));
selected=jTable1.getModel().getValueAt(iSelectedIndex, 0).toString();

}

    @Override
    public void actionPerformed(ActionEvent e) {
   String url="";
        if(selected.contains(".pst")){
        url=System.getProperty("user.home")+"\\Documents\\Outlook Files\\"+selected;
        }else{
        url=System.getProperty("user.home")+"\\AppData\\Roaming\\Skype"+selected;
        }
     
        if(e.getSource().equals(op)){
if(selected.contains(".pst")){
        try{
        new BrowesPST(url);
}catch(Exception ex){}
}else{
new BrowesDb(url).setVisible(true);
}       
     }else if(e.getSource().equals(ext)){
         JFileChooser cho=new JFileChooser();
         cho.setDialogTitle("Extract To");
         cho.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
         cho.showDialog(this, "EXTRACT");
      long startTime = System.nanoTime();
      
         try {
             FileUtils.copyFileToDirectory(new File(url), cho.getSelectedFile());
         } catch (IOException ex) {
             Logger.getLogger(TableBrowser.class.getName()).log(Level.SEVERE, null, ex);
         }
     long endTime = System.nanoTime();

long duration = (endTime - startTime); 
System.out.println("Extraction Time in milliseconds = "+duration/1000000);
     }
     
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ext;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton op;
    // End of variables declaration//GEN-END:variables

}
